{"version":3,"sources":["utils/Constants.js","store/Actions.js","components/Dropdown.js","components/Header.js","store/Store.js","components/AppliedFilters.js","utils/Utilities.js","utils/WindowSize.js","components/Trailer.js","components/Dashboard.js","utils/ScrollEffect.js","components/Main.js","images/loading.gif","index.js"],"names":["Constants","SetFullData","SetSortBy","ToggleLanguageFilter","ToggleGenreFilter","ToggleReleasedMovies","RunTrailer","Popular","Fresh","Actions","data","type","StoreActions","payload","sortBy","filter","add","showing","movieID","Dropdown","props","list","dropdownList","dropddownListRender","forEach","option","i","checkboxClass","label","includes","push","className","onClick","select","isFilter","length","join","Header","dispatch","useDispatch","useSelector","state","languageList","genreList","showingReleasedMovies","languageFilter","genreFilter","style","display","x","defaultState","moviesList","runningTrailerID","getGenres","moviesData","genres","key","movieGenres","EventGenre","split","movieGenre","setGenre","Set","sort","getLanguages","langs","movieLang","EventLanguage","setLang","store","createStore","action","newState","movie","splice","indexOf","AppliedFilters","map","Utilities","number","str","date","getFullYear","toString","this","pad","getMonth","getDate","getHours","getMinutes","getSeconds","parts","pages","currPage","useWindowSize","useState","size","setSize","useLayoutEffect","timeout","updateSize","clearTimeout","setTimeout","window","innerWidth","innerHeight","console","log","addEventListener","removeEventListener","Trailer","width","trailerRef","useRef","ShowDate","day","month","year","trailerID","TrailerURL","useEffect","scrollTo","current","offsetTop","ref","id","title","EventTitle","src","frameborder","allowtransparency","allowFullScreen","EventDimension","genre","ratings","wtsPerc","wtsCount","marginLeft","maybe","dwtsCount","MovieCard","React","lazy","Dashboard","filteredMoviesList","j","SortBy","a","b","trailerUploadDate","parseInt","listItems","mainList","dependencyArray","isLoading","setIsLoading","page","setPage","setListItems","splitList","handleScroll","Math","ceil","document","documentElement","scrollTop","offsetHeight","top","behavior","useScrollEffect","oldTrailerNodes","getElementsByClassName","parentNode","removeChild","find","m","EventCode","movieBlockNode","getElementById","TrailerComponent","createElement","rightNode","leftNode","previousElementSibling","rightTop","getBoundingClientRect","leftTop","insertBefore","ReactDOM","render","trailerNodes","fallback","marginTop","loadingGif","Main","setLoading","axios","get","config","ApiUrl","then","res","status","dummyData","catch","e","bgImage","EventImageUrl","backgroundImage","alt"],"mappings":"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","file":"static/js/main.fc6a27cb.chunk.js","sourcesContent":["//Static Constants class\n\nclass Constants\n{   \n    static get StoreActions()\n    {\n        const StoreActions = {\n            SetFullData: \"SetFullData\",\n            SetSortBy:\"SetSortBy\",\n            ToggleLanguageFilter:\"ToggleLanguageFilter\",\n            ToggleGenreFilter:\"ToggleGenreFilter\",\n            ToggleReleasedMovies : \"ToggleReleasedMovies\",\n            RunTrailer : \"RunTrailer\"\n        };\n        return StoreActions;\n    }\n    static get SortBy()\n    {\n        const SortBy = {\n            Popular: \"Popular\",\n            Fresh:\"Fresh\"\n        };\n        return SortBy;\n    }\n}\n\nexport default Constants;","//Static Action generator class for Redux\n\nimport Constants from \"../utils/Constants.js\";\n\nclass Actions\n{\n    static SetFullData(data) {\n\n        const action = {\n            type : Constants.StoreActions.SetFullData,\n            payload : {\n                data: data\n            }\n        };\n        return action;\n    }\n\n    static SetSortBy(sortBy) {\n\n        const action = {\n            type : Constants.StoreActions.SetSortBy,\n            payload : {\n                sortBy: sortBy\n            }\n        };\n        return action;\n    }\n\n    static ToggleLanguageFilter(filter, add) {\n\n        const action = {\n            type : Constants.StoreActions.ToggleLanguageFilter,\n            payload : {\n                filter: filter,\n                add: add\n            }\n        };\n        return action;\n    }\n\n    static ToggleGenreFilter(filter, add) {\n\n        const action = {\n            type : Constants.StoreActions.ToggleGenreFilter,\n            payload : {\n                filter: filter,\n                add: add\n            }\n        };\n        return action;\n    }\n\n    static ToggleReleasedMovies(showing) {\n\n        const action = {\n            type : Constants.StoreActions.ToggleReleasedMovies,\n            payload : {\n                showing: showing\n            }\n        };\n        return action;\n    }\n\n    static RunTrailer(movieID) {\n\n        const action = {\n            type : Constants.StoreActions.RunTrailer,\n            payload : {\n                movieID: movieID\n            }\n        };\n        return action;\n    }\n    \n}\n\nexport default Actions;","/*\n    A reusable dropdown component\n    Takes 4 input props \n        - label : text \n        - list : shown in dropdown\n        - isFilter : bool whether to show checkbox for filters\n        - select : function to run when clicked on any dropdown item \n*/\n\n//#region \"Imports\"\nimport React from \"react\";\nimport { FaCaretDown } from \"react-icons/fa\";\nimport '../styles/Dropdown.css';\n//#endregion\n\nexport default function Dropdown(props) {\n\n    //#region \"Fill up the Dropdown menu as a list of divs\"\n    if(!props.list)\n        props.list = [];    \n    const dropdownList = props.list;\n\n    let dropddownListRender = [];\n    dropdownList.forEach((option,i) => {\n        let checkboxClass= \"dropdown-item-checkbox\";\n        let add = true;\n        if(props.label.includes(option)){\n            add = false;\n            checkboxClass += \" checked\"\n        }\n        dropddownListRender.push(<div key={option+'_'+i} className={\"dropdown-item\"} onClick={()=>props.select(option,add)}  > \n                                    {props.isFilter && <div className={checkboxClass} > <span>&#10003;</span> </div> }\n                                    <span className=\"ellipsis\" > {option} </span> \n                                </div>);\n    });\n    //#endregion\n\n    //#region \"Set label as ALL or the chosen list\"\n    let label = props.label;\n    if(props.isFilter && label && label.length > 0)\n        label = label.join();\n    //#endregion\n\n    //#region \"Render\"\n    return <div className=\"dropdown\" > \n                <button className=\"btn dropdown-btn\" type=\"button\">\n                    <span className=\"dropdown-label ellipsis\"> {label} </span>\n                    <FaCaretDown className=\"dropdown-icon\"/>\n                </button>\n                \n                <div className=\"dropdown-menu \" >\n                    {dropddownListRender}\n                </div>\n            </div>;\n    //#endregion\n};","/*\r\n    Topmost fixed header includes the Title, buttons and dropdowns\r\n*/\r\n\r\n//#region \"Imports\"\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Dropdown from \"./Dropdown.js\";\r\nimport Actions from \"../store/Actions\";\r\nimport '../styles/Header.css';\r\n//#endregion\r\n\r\nexport default function Header() {\r\n    //#region \"Definitions\"\r\n    const dispatch = useDispatch();\r\n\r\n    const sortBy = useSelector(state => state.sortBy);\r\n    const languageList = useSelector(state => state.languageList);\r\n    const genreList = useSelector(state => state.genreList);\r\n    const showingReleasedMovies = useSelector(state => state.showingReleasedMovies);\r\n    \r\n    let languageFilter = useSelector(state => state.languageFilter);\r\n    let genreFilter = useSelector(state => state.genreFilter);\r\n    //#endregion\r\n\r\n    //#region \"Set default dropdown label text, if no filters are chosen\"\r\n    if(!languageFilter || languageFilter.length === 0) languageFilter = [\"All Languages\"];\r\n    if(!genreFilter || genreFilter.length === 0) genreFilter = [\"All Genres\"];\r\n    //#endregion\r\n\r\n    //#region \"Render\"\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header-item\">\r\n                <div className=\"header-title\"> Movie Trailers </div>\r\n                <div style={{display:\"flex\"}}>\r\n                    <button className={showingReleasedMovies? \"btn header-button\": \"btn header-button active\"} \r\n                            onClick={()=>dispatch(Actions.ToggleReleasedMovies(false))} >coming soon</button>\r\n                    <button className={showingReleasedMovies? \"btn header-button active\": \"btn header-button\"} \r\n                            onClick={()=>dispatch(Actions.ToggleReleasedMovies(true))} >now showing</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"header-item\">\r\n                <Dropdown   label={sortBy} \r\n                            list={[\"Popular\", \"Fresh\"]} isFilter={false}\r\n                            select={(x)=>dispatch(Actions.SetSortBy(x))} />\r\n                <Dropdown   label={languageFilter} \r\n                            list={languageList} isFilter={true}\r\n                            select={(x, add=true)=>dispatch(Actions.ToggleLanguageFilter(x,add))} />\r\n                <Dropdown   label={genreFilter} \r\n                            list={genreList} isFilter={true}\r\n                            select={(x, add=true)=>dispatch(Actions.ToggleGenreFilter(x,add))} />\r\n            </div>\r\n        </div>\r\n    );\r\n    //#endregion\r\n}\r\n","\n//#region \"Imports\"\nimport { createStore } from \"redux\";\nimport Constants from \"../utils/Constants.js\";\n//#endregion\n\n// Default state for our redux store\nconst defaultState = {\n    showingReleasedMovies: false,\n    languageList: [],\n    moviesList: [],\n    sortBy: \"Default\",\n    languageFilter: [],\n    genreList: [],\n    genreFilter: [],\n    runningTrailerID: \"\"\n};\n\n//#region \"Get a full list of genres from the moviesData\"\nfunction getGenres(moviesData) {\n    let genres = [];\n    if(!moviesData) \n        return [];\n\n    for(const key in moviesData) {\n        let movie = moviesData[key];\n        let movieGenres = movie.EventGenre.split('|');\n        if(movieGenres && movieGenres.length > 0) {\n            movieGenres.forEach(movieGenre => {\n                genres.push(movieGenre);\n            });\n        }\n    }\n    \n    let setGenre = new Set(genres);\n    return [...setGenre].sort();\n};\n//#endregion\n\n//#region \"Get a full list of languages from the moviesData\"\nfunction getLanguages(moviesData) {\n    let langs = [];\n    if(!moviesData) \n        return [];\n\n    for(const key in moviesData) {\n        let movie = moviesData[key];\n        let movieLang = movie.EventLanguage;\n        langs.push(movieLang);\n    }\n    \n    let setLang = new Set(langs);\n    return [...setLang].sort();\n};\n//#endregion\n\n\n//#region \"Reducer function for our redux store\"\nfunction reducer(state = defaultState, action) \n{\n    switch(action.type) \n    {\n        // Set the full data which includes list of movies, languages, genres (Run just once on initial load)\n        case Constants.StoreActions.SetFullData : {\n            let newState = {...state};\n            newState.languageList =  getLanguages(action.payload.data.moviesData);\n            let moviesList = [];\n            for(const key in action.payload.data.moviesData) {\n                let movie = action.payload.data.moviesData[key];\n                moviesList.push(movie);\n            }\n            newState.moviesList =  [...moviesList];\n\n            newState.genreList = getGenres(action.payload.data.moviesData);\n            newState.runningTrailerID = \"\";\n            return newState;\n        }\n\n        // Set the sortBy field from the first dropdown (Popular or Fresh)\n        case Constants.StoreActions.SetSortBy : {\n            let newState = {...state};\n            newState.sortBy = action.payload.sortBy;\n            newState.runningTrailerID = \"\";\n            return newState;\n        }\n        \n        // Set the language filter list from the second dropdown (English, Hindi, Marathi ...)\n        case Constants.StoreActions.ToggleLanguageFilter : {\n            let newState = {...state};\n            newState.languageFilter = [...state.languageFilter];\n            newState.runningTrailerID = \"\";\n            if(action.payload.add)\n                newState.languageFilter.push(action.payload.filter);\n            else\n                newState.languageFilter.splice(newState.languageFilter.indexOf(action.payload.filter),1);\n            return newState;\n        }\n        \n        // Set the genre filter list from the third dropdown (Action, Comedy, Drama ...)\n        case Constants.StoreActions.ToggleGenreFilter : {\n            let newState = {...state};\n            newState.genreFilter = [...state.genreFilter];\n            newState.runningTrailerID = \"\";\n            if(action.payload.add)\n                newState.genreFilter.push(action.payload.filter);\n            else\n                newState.genreFilter.splice(newState.genreFilter.indexOf(action.payload.filter),1);\n            return newState;\n        }\n        \n        // Set the showing flag from the two header buttons (Coming Soon or Now showing)\n        case Constants.StoreActions.ToggleReleasedMovies : {\n            let newState = {...state};\n            newState.showingReleasedMovies = action.payload.showing;\n            newState.runningTrailerID = \"\";\n            return newState;\n        }\n        \n        // Set the movie ID for the current running trailer and start the trailer (Called when user clicks on any movie card/image)\n        case Constants.StoreActions.RunTrailer : {\n            let newState = {...state};\n            newState.runningTrailerID = action.payload.movieID;\n            return newState;\n        }\n        \n        default: {\n            return state;\n        }\n    }\n}\n//#endregion\n\n//#region \"Redux Store\"\nconst store  = createStore(reducer);\nexport default store;\n//#endregion\n","/*\n    Shows the list of filters that are applied , \n    each having cross button that will remove that filter\n    Horizontally scrollable if goes beyond the window width\n*/\n\n//#region \"Imports\"\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Actions from \"../store/Actions\";\nimport '../styles/AppliedFilters.css';\n//#endregion\n\nexport default function AppliedFilters() {\n    //#region \"Definitions\"\n    const dispatch = useDispatch();\n    let languageFilter = useSelector(state => state.languageFilter);\n    let genreFilter = useSelector(state => state.genreFilter);\n    //#endregion\n\n    //#region \"Render\"\n    return <div className=\"applied-filters\">\n                <div className=\"label\">Applied Filters: </div> \n                \n                <div className=\"list\">\n                    {languageFilter.map(filter => {\n                        return  <div key={filter} className=\"filter-item\"> \n                                    <span> {filter} </span> \n                                    <span onClick={()=>dispatch(Actions.ToggleLanguageFilter(filter,false))} \n                                            className=\"filter-cross\" >\n                                        &#x2715;\n                                    </span>\n                                </div>;\n                    })}\n                    \n                    {genreFilter.map(filter => {\n                        return  <div key={filter} className=\"filter-item\"> \n                                    <span> {filter} </span> \n                                    <span onClick={()=>dispatch(Actions.ToggleGenreFilter(filter,false))} \n                                            className=\"filter-cross\" >\n                                        &#x2715;\n                                    </span>\n                                </div>;\n                    })}\n                </div>\n            </div>;\n    //#endregion\n}\n\n","//Static Utilities class\n\nclass Utilities\n{\n\tstatic pad(number, length) \n\t{\n\t\tvar str = '' + number;\n\t\twhile (str.length < length) {\n\t\t\tstr = '0' + str;\n\t\t}\n\t\treturn str;\n\t}\n\n\tstatic DateToString(date) \n\t{\n\t\tvar yyyy = date.getFullYear().toString();\n\t\tvar MM = this.pad(date.getMonth() + 1,2);\n\t\tvar dd = this.pad(date.getDate(), 2);\n\t\tvar hh = this.pad(date.getHours(), 2);\n\t\tvar mm = this.pad(date.getMinutes(), 2)\n\t\tvar ss = this.pad(date.getSeconds(), 2)\n\n\t\treturn yyyy + MM + dd+  hh + mm + ss;\n\t}\n\n\tstatic splitList(list,parts) {\n\n\t\tlet pages = [];\n\t\tlet currPage = [];\n\t\tfor (let i = 0; i < list.length; i++) {\n\t\t\tif (i % parts === 0) {\n\t\t\t\tpages.push(currPage);\n\t\t\t\tcurrPage = [];\n\t\t\t}\n\t\t\tcurrPage.push(list[i]);\n\t\t}\n\n\t\tif (currPage !== []) \n\t\t\tpages.push(currPage);\n\n\t\treturn pages;\n\t}\n}\n\nexport default Utilities;\n","/*\n    A custom reusable hook to capture change in the window size\n*/\n\nimport { useLayoutEffect, useState } from 'react';\n\nexport default function useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        let timeout; \n        \n        function updateSize() {\n            clearTimeout(timeout);\n            timeout = setTimeout(()=>{\n                setSize([window.innerWidth, window.innerHeight]);\n                console.log(\"Width Changed\");\n            },500)\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n","/*\n    The Trailer component is called when user clicks on MovieCard \n    This component is called from the Dashboard and \n    its position in the flex is dynamically calculated in Dashboard\n*/\n\n//#region \"Imports\"\nimport React, { useEffect, useRef } from \"react\";\nimport { MdThumbDown, MdThumbUp } from \"react-icons/md\";\nimport { GoCalendar } from \"react-icons/go\";\nimport { BiQuestionMark } from \"react-icons/bi\"; \n\nimport '../styles/Trailer.css';\nimport useWindowSize from \"../utils/WindowSize\";\n//#endregion\n\nexport default function Trailer({movie}) {\n    //#region \"Imports\"\n    const [width, height] = useWindowSize();\n    const trailerRef = useRef(null);\n    //#endregion\n\n    //#region \"Set the date to be shown on the right side (details section)\"\n    const date = movie.ShowDate.split(' ');\n    const day = date[0];\n    const month = date[1].split(',')[0];\n    const year = date[2];\n    //#endregion\n\n    //#region \"Important trailer id to be used in the useEffect and in Rendering\"\n    const trailerID = movie.TrailerURL.split(\"v=\")[1].split(\"&\")[0];\n    //#endregion\n    \n    //#region \"Scroll to the trailer when a trailer is loaded or when the window is resized\"\n    useEffect(()=>{\n        if(trailerID && trailerID !== \"\") {\n            window.scrollTo(0, trailerRef.current.offsetTop - 130);\n        }\n    }, [trailerID, width]);\n    //#endregion\n\n    //#region \"Render\"\n    /*\n        Render the Movie Trailer block above the selected card's row\n        On the left would be the trailer video running on YOUTUBE\n        On the right would be the details of the movie and few like/dislike buttons\n    */\n\n    return  <div ref={trailerRef} className=\"trailer-container\" >\n                <iframe id={trailerID} title={movie.EventTitle} className=\"trailer-iframe\"\n                        src = {\"https://www.youtube.com/embed/\" + trailerID + \"?autoplay=1&mute=1&enablejsapi=1\"} \n                        frameborder=\"0\" allowtransparency=\"true\" allowFullScreen=\"true\"\n                />\n                <div className=\"movie-details\">\n                    <div className=\"title\"> {movie.EventTitle} </div>\n                    <div className=\"language\"> {movie.EventLanguage} ({movie.EventDimension}) </div>\n                    <div className=\"genre-list\"> \n                        {movie.EventGenre.split('|').map(genre => <div className=\"genre\">{genre}</div>)}\n                    </div>\n\n                    <div className=\"rate-date flex-row\">\n                        <MdThumbUp className=\"icon\"/>\n                        <div className=\"rate flex-column\">\n                            <div className=\"big-text\">{movie.ratings.wtsPerc}%</div>\n                            <div className=\"small-text\">{movie.ratings.wtsCount} votes</div>\n                        </div>\n                        \n                        <GoCalendar className=\"icon\" style={{marginLeft:\"20px\"}} />\n                        <div className=\"date flex-column\">\n                            <div className=\"big-text\">{day + \" \" + month} </div>\n                            <div className=\"small-text\">{year}</div>\n                        </div>\n                    </div>\n                    \n                    <div className=\"watch-qstn flex-row\">\n                        <div className=\"flex-center\" >\n                            <MdThumbUp className=\"yes icon\"/>\n                            <div className=\"yes text\">will watch</div>\n                            <div className=\"yes text\">({movie.ratings.wtsCount})</div>\n                        </div>\n                        <div className=\"flex-center\" >\n                            <BiQuestionMark className=\"maybe icon\"/>\n                            <div className=\"maybe text\">maybe</div>\n                            <div className=\"maybe text\">({movie.ratings.maybe})</div>\n                        </div>\n                        <div className=\"flex-center\" >\n                            <MdThumbDown className=\"no icon\"/>\n                            <div className=\"no text\">won't watch</div>\n                            <div className=\"no text\">({movie.ratings.dwtsCount})</div>\n                        </div>\n                    </div>\n                </div>\n            </div>;\n    //#endregion\n}","/*\n    The Main Dashboard component - starts below the Header\n    Includes the AppliedFilters component\n    Calls the MovieBlock component for each movie in the movie list\n*/\n\n//#region \"Imports\"\nimport React, { useEffect, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useSelector, Provider } from \"react-redux\";\n\nimport store from \"../store/Store.js\";\nimport \"../styles/Dashboard.css\";\nimport AppliedFilters from \"./AppliedFilters\";\nimport Constants from \"../utils/Constants\";\nimport useScrollEffect from \"../utils/ScrollEffect\";\nimport Trailer from \"./Trailer\";\nimport useWindowSize from \"../utils/WindowSize.js\";\n\nconst MovieCard = React.lazy(() => import(\"./MovieCard\"));\n//#endregion\n\nexport default function Dashboard() {\n    //#region \"Definitions\"\n    const [width, height] = useWindowSize();\n    const moviesList = useSelector(state => state.moviesList);\n    const sortBy = useSelector(state => state.sortBy);\n    const languageFilter = useSelector(state => state.languageFilter);\n    const genreFilter = useSelector(state => state.genreFilter);\n    const runningTrailerID = useSelector(state => state.runningTrailerID);\n    //#endregion\n\n    //#region \"Filtering and Sorting the Movie List\"\n    let filteredMoviesList = [];\n    if (moviesList && moviesList.length > 0) {\n        filteredMoviesList = [...moviesList];\n\n        if (languageFilter && languageFilter.length > 0)\n            filteredMoviesList = filteredMoviesList.filter(movie => languageFilter.includes(movie.EventLanguage));\n\n        if (genreFilter && genreFilter.length > 0) {\n            filteredMoviesList = filteredMoviesList.filter(movie => {\n                let movieGenres = movie.EventGenre.split(\"|\");\n\n                for (let j = 0; j < genreFilter.length; j++) {\n                    const genre = genreFilter[j];\n\n                    if (movieGenres.includes(genre)) return true;\n                }\n                return false;\n            });\n        }\n\n        if (sortBy === Constants.SortBy.Fresh) {\n            filteredMoviesList.sort((a, b) => b.trailerUploadDate - a.trailerUploadDate);\n        } else if (sortBy === Constants.SortBy.Popular) {\n            filteredMoviesList.sort((a, b) => parseInt(b.ratings.wtsCount) - parseInt(a.ratings.wtsCount));\n        }\n    }\n    //#endregion\n\n    //#region \"Scrolling effect to load and render more movies on scroll\"\n    const listItems = useScrollEffect(filteredMoviesList, [moviesList, sortBy, languageFilter, genreFilter]);\n    //#endregion\n\n    //#region \"Render the trailer node above the selected row\"\n    useEffect(() => {\n        const oldTrailerNodes = document.getElementsByClassName(\"trailer-component\");\n        if (oldTrailerNodes && oldTrailerNodes.length > 0) oldTrailerNodes[0].parentNode.removeChild(oldTrailerNodes[0]);\n\n        if (runningTrailerID && runningTrailerID !== \"\") {\n            const movie = moviesList.find(m => m.EventCode === runningTrailerID);\n\n            const movieBlockNode = document.getElementById(runningTrailerID);\n            const TrailerComponent = document.createElement(\"div\");\n            TrailerComponent.className = \"trailer-component\";\n            TrailerComponent.id = \"trailer-component-\" + runningTrailerID;\n\n            let rightNode = movieBlockNode;\n            let leftNode = rightNode.previousElementSibling;\n\n            if (leftNode !== null) {\n                let rightTop = rightNode.getBoundingClientRect().top;\n                let leftTop = leftNode.getBoundingClientRect().top;\n\n                while (rightTop === leftTop) {\n                    leftNode = leftNode.previousElementSibling;\n                    rightNode = rightNode.previousElementSibling;\n\n                    if (leftNode == null) break;\n\n                    rightTop = rightNode.getBoundingClientRect().top;\n                    leftTop = leftNode.getBoundingClientRect().top;\n                }\n            }\n\n            const movieListElement = document.getElementsByClassName(\"movie-list\")[0];\n            movieListElement.insertBefore(TrailerComponent, rightNode);\n\n            ReactDOM.render(\n                <Provider store={store}>\n                    <Trailer movie={movie} />\n                </Provider>,\n                document.getElementById(TrailerComponent.id),\n            );\n        }\n    }, [runningTrailerID]);\n    //#endregion\n\n    //#region \"Move the trailer above the selected row on resize\"\n    useEffect(() => {\n        if (runningTrailerID && runningTrailerID !== \"\") {\n            const trailerNodes = document.getElementsByClassName(\"trailer-component\");\n            if (trailerNodes && trailerNodes.length > 0) {\n                const TrailerComponent = trailerNodes[0];\n                TrailerComponent.parentNode.removeChild(TrailerComponent);\n\n                const movieBlockNode = document.getElementById(runningTrailerID);\n\n                let rightNode = movieBlockNode;\n                let leftNode = rightNode.previousElementSibling;\n\n                if (leftNode !== null) {\n                    let rightTop = rightNode.getBoundingClientRect().top;\n                    let leftTop = leftNode.getBoundingClientRect().top;\n\n                    while (rightTop === leftTop) {\n                        leftNode = leftNode.previousElementSibling;\n                        rightNode = rightNode.previousElementSibling;\n\n                        if (leftNode === null) break;\n\n                        rightTop = rightNode.getBoundingClientRect().top;\n                        leftTop = leftNode.getBoundingClientRect().top;\n                    }\n                }\n\n                const movieListElement = document.getElementsByClassName(\"movie-list\")[0];\n                movieListElement.insertBefore(TrailerComponent, rightNode);\n            }\n        }\n    }, [width]);\n    //#endregion\n\n    //#region \"Render\"\n    return (\n        <div className=\"dashboard\">\n            <AppliedFilters />\n\n            <div className=\"movie-list\">\n                {listItems &&\n                    listItems.length > 0 &&\n                    listItems.map(movie => (\n                        <div key={movie.EventCode} id={movie.EventCode}>\n                            <Suspense fallback={<div style={{ display: \"none\" }}></div>}>\n                                <MovieCard key={movie.EventCode} movie={movie} />\n                            </Suspense>\n                        </div>\n                    ))}\n                {!listItems || (listItems.length == 0 && <div style={{ marginTop: \"100px\" }}> No data found for the applied filter.</div>)}\n            </div>\n        </div>\n    );\n    //#endregion\n}\n","/*\n    A custom reusable hook to enable infinite scrolling effect \n    for applications that have full list of data to be renderred\n\n    Takes 2 arguments\n        mainList - the whole list of data which will be divided into parts\n        dependencyArray - dependency array for the useEfffect that sets the first data \n*/\n\n//#region \"Imports\"\nimport {useEffect,useState} from \"react\";\nimport Utilities from \"../utils/Utilities.js\";\n//#endregion\n\nexport default function useScrollEffect(mainList, dependencyArray) {\n    //#region \"Definiions\"\n    const [isLoading, setIsLoading] = useState(false);\n    const [page, setPage] = useState(1);\n    const [listItems, setListItems] = useState([]);\n    //#endregion\n    \n    //#region \"Use the utility function to split list into parts\"\n    let splitList = Utilities.splitList(mainList,20);\n    //#endregion\n\n    //#region \"Function run on every scroll\"\n    const handleScroll = () => {\n        if (Math.ceil(window.innerHeight + document.documentElement.scrollTop) !== document.documentElement.offsetHeight\n                || isLoading)\n            return;\n            \n        if(page < splitList.length - 1)\n            setIsLoading(true);\n    };\n    //#endregion\n\n    //#region \"useEffect to set initial data\"\n    useEffect(() => {\n        if(splitList && splitList.length > 0) {\n            const data = splitList[1];\n            if(data && data.length > 0)\n                setListItems(() => [...data]);\n            else\n                setListItems(() => []);\n\n            window.scrollTo({top: 0, behavior: 'smooth'});\n\n            window.addEventListener('scroll', handleScroll);\n            return () => window.removeEventListener(\"scroll\", handleScroll);\n        }\n        \n    }, dependencyArray);\n    //#endregion\n    \n    //#region \"useEffect to set the data after scrolled beyond the existing data\"\n    useEffect(() => {\n        if (!isLoading) return;\n        \n        setTimeout(() => {\n            if(page < splitList.length - 1) {\n                const data = splitList[page+1];\n                setPage(page + 1);\n                if(data && data.length > 0)\n                    setListItems(() => [...listItems, ...data]);\n            }\n        },300);\n        \n        setIsLoading(false);\n    }, [isLoading]);\n    //#endregion\n\n    return listItems;\n}\n","/*\n    Main component which is called from index.js\n    it calls the API to fetch the data on first load and \n    dispatches the action to redux store to set the full data\n*/\n\n//#region \"Imports\"\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nimport config from \"../config.json\";\nimport dummyData from \"../dummyData.json\";\nimport Header from \"./Header.js\";\nimport Actions from \"../store/Actions\";\nimport Dashboard from \"./Dashboard\";\nimport \"../styles/Main.css\";\n\nimport * as img from \"../images/loading.gif\";\nconst loadingGif = img.default;\n//const loadingGif = require(\"../images/loading.gif\");\n//#endregion\n\nexport default function Main() {\n    //#region \"Definitions\"\n    const moviesList = useSelector(state => state.moviesList);\n    const runningTrailerID = useSelector(state => state.runningTrailerID);\n\n    const dispatch = useDispatch();\n    const [isLoading, setLoading] = useState(true);\n    //#endregion\n\n    //#region \"Make GET request to the API (The url is imported from config.json file)\"\n    useEffect(() => {\n        axios\n            .get(config.ApiUrl)\n            .then(res => {\n                if (res.status === 200) {\n                    dispatch(Actions.SetFullData(res.data));\n                } else {\n                    console.log(\"Error \" + res.status);\n                    dispatch(Actions.SetFullData(dummyData));\n                }\n                setLoading(false);\n            })\n            .catch(e => {\n                console.log(\"Error \" + e);\n                dispatch(Actions.SetFullData(dummyData));\n                setLoading(false);\n            });\n    }, []);\n    //#endregion\n\n    //#region \"Set a translusent background image corresponding to the trailer that is running\"\n    let bgImage = \"\";\n    if (runningTrailerID && runningTrailerID != \"\") {\n        const movie = moviesList.find(m => m.EventCode === runningTrailerID);\n        if (movie) bgImage = movie.EventImageUrl;\n    }\n    //#endregion\n\n    //#region \"Render\"\n    return (\n        <div className=\"main\">\n            <div className=\"blur-bg\" style={{ backgroundImage: \"url(\" + bgImage + \")\" }}></div>\n            <Header />\n            {isLoading && (\n                <div className=\"loading-gif\">\n                    <img src={loadingGif} alt=\"loading...\" />\n                </div>\n            )}\n            {!isLoading && <Dashboard />}\n        </div>\n    );\n    //#endregion\n}\n","export default __webpack_public_path__ + \"static/media/loading.42aaa181.gif\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Main from './components/Main.js';\nimport store from './store/Store.js';\n\nReactDOM.render(\n  <Provider store={store} >\n    <Main />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}